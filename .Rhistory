summary_stats[which.max(summary_stats$IQR), c(1, 3)]
summary_stats[which.max(summary_stats$range), c(1, 4)]
# type your code for Question 2 here, and Knit
ggplot(ames_train, aes(x = price, y = Neighborhood)) + geom_point(col = "blue", alpha = 0.5, size = 1.5) + ggtitle("Plot 2. Prices of the Houses in Different Neighbourhoods") + labs(x = "price($)") + scale_x_continuous(breaks = waiver(), labels = c("0", "200.000", "400.000", "600.000"))
summary_stats <- ames_train %>% group_by(Neighborhood) %>% summarise(median = median(price),
range = max(price) - min(price))
summary_stats[which.max(summary_stats$median), 1:2]
summary_stats[which.min(summary_stats$median), 1:2]
summary_stats[which.max(summary_stats$range), c(1, 3)]
print("the highest median price is in")
"the highest median price is in"
paste("the highest median price is in", summary_stats[which.max(summary_stats$median), 1:2])
paste("the highest median price is in", summary_stats[which.max(summary_stats$median), 1])
paste("the highest median price", summary_stats[which.max(summary_stats$median), 2], "is in", summary_stats[which.max(summary_stats$median), 1])
paste(summary_stats[which.max(summary_stats$median), 1], "the highest median price", summary_stats[which.max(summary_stats$median), 2], "is in")
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest median price:", summary_stats[which.max(summary_stats$median), 2])
paste(summary_stats[which.max(summary_stats$median), "Neighbourhood"], "has the highest median price:", summary_stats[which.max(summary_stats$median), 2])
paste(summary_stats[which.max(summary_stats$median), summary_stats$Neighborhood], "has the highest median price:", summary_stats[which.max(summary_stats$median), 2])
paste(summary_stats[which.max(summary_stats$median), as.character(summary_stats$Neighborhood)], "has the highest median price:", summary_stats[which.max(summary_stats$median), 2])
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest median price:", summary_stats[which.max(summary_stats$median), 2])
summary_stats[which.max(summary_stats$median), 1]
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest median price:", summary_stats[which.max(summary_stats$median), 2])
paste0(summary_stats[which.max(summary_stats$median), 1], "has the highest median price:", summary_stats[which.max(summary_stats$median), 2])
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest median price:", summary_stats[which.max(summary_stats$median), 2])
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest median price:", summary_stats[which.max(summary_stats$median), 2], "$")
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest median price:", summary_stats[which.max(summary_stats$median), 2],"$")
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest median price:", summary_stats[which.max(summary_stats$median), 2]"$")
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest median price:", summary_stats[which.max(summary_stats$median), 2], "$")
paste(summary_stats[which.max(summary_stats$median), summary_stats$Neighborhood], "has the highest median price:", summary_stats[which.max(summary_stats$median), 2], "$")
str(summary_stats)
summary_stats$Neighborhood <- as.character(summary_stats$Neighborhood)
paste(summary_stats[which.max(summary_stats$median), 1, "has the highest median price:", summary_stats[which.max(summary_stats$median), 2], "$")
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest median price:", summary_stats[which.max(summary_stats$median), 2], "$")
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest median price:", summary_stats[which.max(summary_stats$median), 2], "$")
paste(summary_stats[which.min(summary_stats$median), 1], "has the lowest median price:", summary_stats[which.max(summary_stats$median), 2], "$")
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest median price:", summary_stats[which.max(summary_stats$median), 2], "$")
paste(summary_stats[which.min(summary_stats$median), 1], "has the lowest median price:", summary_stats[which.max(summary_stats$median), 2], "$")
paste(summary_stats[which.max(summary_stats$range), 1], "has the widest range in prices:", summary_stats[which.max(summary_stats$median), 3], "$")
# type your code for Question 2 here, and Knit
ggplot(ames_train, aes(x = price, y = Neighborhood)) + geom_point(col = "blue", alpha = 0.5, size = 1.5) + ggtitle("Plot 2. Prices of the Houses in Different Neighbourhoods") + labs(x = "price($)") + scale_x_continuous(breaks = waiver(), labels = c("0", "200.000", "400.000", "600.000"))
summary_stats <- ames_train %>% group_by(Neighborhood) %>% summarise(median = median(price),
range = max(price) - min(price))
summary_stats$Neighborhood <- as.character(summary_stats$Neighborhood)
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest median price:", summary_stats[which.max(summary_stats$median), 2], "$")
paste(summary_stats[which.min(summary_stats$median), 1], "has the lowest median price:", summary_stats[which.max(summary_stats$median), 2], "$")
paste(summary_stats[which.max(summary_stats$range), 1], "has the widest range in prices:", summary_stats[which.max(summary_stats$median), 3], "$")
# type your code for Question 2 here, and Knit
ggplot(ames_train, aes(x = price, y = Neighborhood)) + geom_point(col = "blue", alpha = 0.5, size = 1.5) + ggtitle("Plot 2. Prices of the Houses in Different Neighbourhoods") + labs(x = "price($)") + scale_x_continuous(breaks = waiver(), labels = c("0", "200.000", "400.000", "600.000"))
summary_stats <- ames_train %>% group_by(Neighborhood) %>% summarise(median = median(price),
range = max(price) - min(price))
summary_stats$Neighborhood <- as.character(summary_stats$Neighborhood)
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest median price:", summary_stats[which.max(summary_stats$median), 2], "$")
paste(summary_stats[which.min(summary_stats$median), 1], "has the lowest median price:", summary_stats[which.min(summary_stats$median), 2], "$")
paste(summary_stats[which.max(summary_stats$range), 1], "has the widest range in prices:", summary_stats[which.max(summary_stats$median), 3], "$")
# type your code for Question 2 here, and Knit
ggplot(ames_train, aes(x = price, y = Neighborhood)) + geom_point(col = "blue", alpha = 0.5, size = 1.5) + ggtitle("Plot 2. Prices of the Houses in Different Neighbourhoods") + labs(x = "price($)") + scale_x_continuous(breaks = waiver(), labels = c("0", "200.000", "400.000", "600.000"))
summary_stats <- ames_train %>% group_by(Neighborhood) %>% summarise(median = median(price),
range = max(price) - min(price))
summary_stats$Neighborhood <- as.character(summary_stats$Neighborhood)
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest median housing price:", summary_stats[which.max(summary_stats$median), 2], "$")
paste(summary_stats[which.min(summary_stats$median), 1], "has the lowest median housing price:", summary_stats[which.min(summary_stats$median), 2], "$")
paste(summary_stats[which.max(summary_stats$range), 1], "has the most variation in housing price:", summary_stats[which.max(summary_stats$median), 3], "$")
summary(ames_train)
sum(ames_train$Garage.Cond == "NA")
sum(is.na(ames_train$Garage.Cond))
sum(is.na(ames_train[, 5]))
sum(is.na(ames_train[, 50]))
sum(is.na(ames_train[, 50:60]))
sum(is.na(ames_train))
colsum(is.na(ames_train))
colSums(is.na(ames_train))
which.max(colSums(is.na(ames_train)))
# type your code for Question 3 here, and Knit
which.max(colSums(is.na(ames_train)))
paste(which.max(colSums(is.na(ames_train)), "is the variable with largest number of missing values")
paste(which.max(colSums(is.na(ames_train)), "is the variable with largest number of missing values"))
paste(which.max(colSums(is.na(ames_train))), "is the variable with largest number of missing values")
colnames(which.max(colSums(is.na(ames_train)))
)
?colnames
colnames(which.max(colSums(is.na(ames_train))), prefix = "col")
colnames(ames_train)
colnames(ames_train[, 74])
colnames(ames_train[, which.max(colSums(is.na(ames_train)))])
paste(colnames(ames_train[, which.max(colSums(is.na(ames_train)))])), "is the variable with largest number of missing values")
paste(colnames(ames_train[, which.max(colSums(is.na(ames_train)))]), "is the variable with largest number of missing values")
paste(colnames(ames_train[, which.max(colSums(is.na(ames_train)))]), "is the variable with the largest number of missing values:", max(colSums(is.na(ames_train))))
# type your code for Question 1 here, and Knit
ames_train$age <- 2017 - ames_train$Year.Built
qplot(ames_train$age, geom = "histogram",
main = "Plot 1. Histogram for the Ages of the Houses",
bins = 30,
xlab = "Age(years)",
fill = I("blue"),
col = I("blue"),
alpha = I(.5))
# type your code for Question 2 here, and Knit
ggplot(ames_train, aes(x = price, y = Neighborhood)) + geom_point(col = "blue", alpha = 0.5, size = 1.5) + ggtitle("Plot 2. Housing Prices in Different Neighbourhoods") + labs(x = "price($)") + scale_x_continuous(breaks = waiver(), labels = c("0", "200.000", "400.000", "600.000"))
summary_stats <- ames_train %>% group_by(Neighborhood) %>% summarise(median = median(price),
range = max(price) - min(price))
summary_stats$Neighborhood <- as.character(summary_stats$Neighborhood)
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest median housing price:", summary_stats[which.max(summary_stats$median), 2], "$")
paste(summary_stats[which.min(summary_stats$median), 1], "has the lowest median housing price:", summary_stats[which.min(summary_stats$median), 2], "$")
paste(summary_stats[which.max(summary_stats$range), 1], "has the most variation in housing price:", summary_stats[which.max(summary_stats$median), 3], "$")
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest median housing price:", summary_stats[which.max(summary_stats$median), 2], "$")
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest / median housing price:", summary_stats[which.max(summary_stats$median), 2], "$")
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest /n median housing price:", summary_stats[which.max(summary_stats$median), 2], "$")
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest \ median housing price:", summary_stats[which.max(summary_stats$median), 2], "$")
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest \n median housing price:", summary_stats[which.max(summary_stats$median), 2], "$")
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest" \n "median housing price:", summary_stats[which.max(summary_stats$median), 2], "$")
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest", \n, "median housing price:", summary_stats[which.max(summary_stats$median), 2], "$")
paste(summary_stats[which.max(summary_stats$median), 1], "has the highest", /n, "median housing price:", summary_stats[which.max(summary_stats$median), 2], "$")
?lm
# type your code for Question 4 here, and Knit
model_full <- lm(ln(price) ~ Lot.Area + Land.Slope + Year.Built + Year.Remod.Add + Bedroom.AbvGr,
data = ames_train)
# type your code for Question 4 here, and Knit
model_full <- lm(log(price) ~ Lot.Area + Land.Slope + Year.Built + Year.Remod.Add + Bedroom.AbvGr,
data = ames_train)
model_full
summary(model_full)
# type your code for Question 4 here, and Knit
model_full <- lm(log(price) ~ Lot.Area + Year.Built + Year.Remod.Add + Bedroom.AbvGr,
data = ames_train)
summary(model_full)
# type your code for Question 4 here, and Knit
model_full <- lm(log(price) ~ Lot.Area + Land.Slope + Year.Built + Year.Remod.Add + Bedroom.AbvGr,
data = ames_train)
summary(model_full)
model_full
str(model_full)
max(model_full$residuals)
which.max(model_full$residuals)
which.min(model_full$residuals)
ames_train[428]
ames_train[428,]
a <- c("Lot.Area", "Land.Slope", "Year.Built", "Year.Remod.Add", "Bedroom.AbvGr")
ames_train[428, a]
ames_train[428, 1:82]
which.max(abs(max(model_full$residuals), abs(min(model_full$residuals))))
which.max(abs(max(model_full$residuals)), abs(min(model_full$residuals)))
abs(-6)
abs(min(model_full$residuals))
max(abs(max(model_full$residuals)), abs(min(model_full$residuals)))
which.max(abs(model_full$residuals))
# type your code for Question 5 here, and Knit
which.max(abs(model_full$residuals))
# type your code for Question 5 here, and Knit
which.max((model_full$residuals)^2)
largest_residual <- which.max(model_full$residuals^2)
ames_train[largest_residual,]
old_town <- ames_train %>% filter(Neighborhood == "OldTown")
View(old_town)
ggplot(old_town, aes(x = Sale.Condition, y = price)) + geom_boxplot()
ggplot(ames_train, aes(x = Sale.Condition, y = price)) + geom_boxplot()
ggplot(ames_train, aes(x = Overall.Qual, y = price)) + geom_boxplot()
ggplot(ames_train, aes(x = Overall.Qual, y = price, group = Overall.Qual)) + geom_boxplot()
ggplot(ames_train, aes(x = Overall.Cond, y = price, group = Overall.Cond)) + geom_boxplot()
mean(old_town$Overall.Qual)
mean(old_town$Overall.Cond)
old_town$Overall <- old_town %>% mutate(Overall = (Overlall.Qual + Overall.Cond)/2)
old_town$Overall <- old_town %>% mutate(Overall = (Overall.Qual + Overall.Cond)/2)
ggplot(ames_train, aes(x = Overall, y = price, group = Overall)) + geom_boxplot()
View(old_town)
View(old_town)
old_town <- ames_train %>% filter(Neighborhood == "OldTown")
old_town$Overall <- old_town$Overall = (old_town$Overall.Cond + old_town$Overall.Qual)/2
old_town$Overall <- old_town$Overall = (old_town$Overall.Cond + old_town$Overall.Qual)/2
old_town$Overall <- (old_town$Overall.Cond + old_town$Overall.Qual)/2
ggplot(ames_train, aes(x = Overall, y = price, group = Overall)) + geom_boxplot()
ggplot(old_town, aes(x = Overall, y = price, group = Overall)) + geom_boxplot()
ames_train$Overall <- (old_town$Overall.Cond + old_town$Overall.Qual)/2
ames_train$Overall <- (ames_train$Overall.Cond + ames_train$Overall.Qual)/2
ggplot(ames_train, aes(x = Overall, y = price, group = Overall)) + geom_boxplot()
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(1:3))
select(cran, -(x:size))
cran
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran !is.na(r_version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package ip_id)
arrange(cran2, package, ip_id)
arrange(cran2, country desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
swirl()
library(swirl)
swirl()
dist(dataFrame)
hc  <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = .4, col = "red")
5
12
abline(h = .05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
run("addPatt.R", local = TRUE)
"addPatt.R", local = TRUE
execute("addPatt.R", local = TRUE)
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
(svd1$u[,1]*svd1$d[1]) %*% t(svd1$v[,1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[, 1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[, 1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[, 1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ss$activity)
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[, 1:12])
myedit("showxy.R")
myedit("showXY.R")
showMe(1:6)
dist(sub1[,1:3])
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustgering <- hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activi))
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562, 563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(c(sub1[,10:12]), maxCon)
mdist <- dist(c(sub1[,10:12], maxCon))
mdist <- dist(c(sub1[,10:12], sub1(maxCon)))
mdist <- dist(c(sub1[,10:12], sub1[,maxCon]))
maxCon
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kclust <- kmeans(sub1[,-c(562, 563)], centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kclust$centers)
dim(kClust$centers)
laying <- which(kclust$size == 29)
laying <- which(kClust$size==29)
plot(kClust$center[laying, 1:12], pch = 19, ylab = "Laying Cluster")
plot(kClust$centers[laying, 1:12],pch=19,ylab="Laying Cluster")
names(sub1[, 1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
cran
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US"|country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, pakcage, size)
cran3 <- select(cran, ip_id, pakcage, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2¨20)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(student2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
library(readr)
parse_number("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
?select
submit()
submit()
SCC <- readRDS("Source_Classification_Code.rds")
url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
download.file(url, "FNEI_data.zip")
unzip("FNEI_data.zip")
SCC <- readRDS("Source_Classification_Code.rds")
View(SCC)
library("swirl", lib.loc="~/R/win-library/3.3")
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 14, minutes = 14)
this_moment
nyc <- now(tz = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tz = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
?aggregate
setwd("~/Reproducible research")
setwd("~/Reproducible research/RepData_PeerAssessment1")
unzip("activity.zip")
data <- read.csv("activity.csv", header = TRUE)
View(data)
str(data)
data <- read.csv("activity.csv", header = TRUE, stringsAsFactors = FALSE)
str(data)
